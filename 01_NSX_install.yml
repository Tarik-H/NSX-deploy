---
- name: NSX global parameters
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    uplinkprofs:
      - {"name": "actv-actv-4nics", "policy": "LOADBALANCE_SRCID", "active-uplinks": [1,2,3,4] }
      # - {"name": "actv-actv-2nics", "policy": "LOADBALANCE_SRCID", "active-uplinks": [1,2] }
      # - {"name": "actv-stdby-2nics", "policy": "FAILOVER_ORDER", "active-uplinks": [1,2]}

  tasks:

  # - name: Delete data directories
  #   file:
  #     path: ./{{item}}
  #     state: absent
  #   with_items:
  #     - 'data'
  #     - 'data'
  #     - 'fragments'

  # - name: Create data directories
  #   file:
  #     path: ./data/fragments
  #     state: directory

  # - name: Copy & prepare the uploaded input Excel file
  #   copy:
  #     src: "{{nsx_filepath}}/"
  #     dest: "./data/{{nsx_filename}}"

  # - name: Initialize the excel file to use the input data
  #   xls_to_facts:
  #     src: "./data/{{nsx_filename}}"
  #   tags:
  #     - excel

  # - name: Create system fabric model from spreadsheet data
  #   template:
  #     src: "./templates/{{item}}_system_fabric.j2"
  #     dest: "./data/fragments/{{item}}_system_fabric.yml"
  #   with_items:
  #     - "01"

  # - name: Assemble fabric model
  #   assemble:
  #     src: "./data/fragments/"
  #     dest: "./data/system_fabric.yml"

  # - name: load data
  #   include_vars:
  #     file: "./data/system_fabric.yml"

  # - name: Provision list of compute managers
  #   nsxt_fabric_compute_managers:
  #     hostname: "{{nsxt_ip}}"
  #     username: "{{nsx_username}}"
  #     password: "{{nsx_password}}"
  #     validate_certs: False
  #     display_name: "vCenter_{{item}}"
  #     server: "{{item}}"
  #     description: "vCenter_{{item}}"
  #     origin_type: vCenter
  #     credential:
  #       credential_type: "UsernamePasswordLoginCredential"
  #       username: "{{vcenter_user}}"
  #       password: "{{vcenter_pass}}"
  #     state: present
  #   register: cpu_mgr
  #   with_items: "{{system_fabric.vcenters_list}}"
  #   when: system_fabric.vcenters_list is defined

  # - name: View all compute managers
  #   debug:
  #     msg: "{{cpu_mgr}}"

  # - name: Create transport zone
  #   nsxt_transport_zones:
  #     hostname: "{{nsxt_ip}}"
  #     username: "{{nsx_username}}"
  #     password: "{{nsx_password}}"
  #     validate_certs: False
  #     resource_type: "TransportZone"
  #     display_name: "TZ_{{item}}"
  #     host_switch_mode: "STANDARD"
  #     description: "NSX configured {{item}} Transport Zone"
  #     transport_type: "{%if 'Overlay' in item%}OVERLAY{%elif 'Vlan' in item%}VLAN{%endif%}"
  #     is_default: "false"
  #     nested_nsx: "false"
  #     host_switch_name: "NSXT-NVDS"
  #     state: "present"
  #   with_items:
  #     - Overlay
  #     - Vlan


# This is a spot in case the Edges are nested inside compute transport node NVDS
  # - name: Create transport zone
  #   nsxt_transport_zones:
  #     hostname: "{{nsxt_ip}}"
  #     username: "{{nsx_username}}"
  #     password: "{{nsx_password}}"
  #     validate_certs: False
  #     resource_type: "TransportZone"
  #     display_name: "TZ_{{item}}"
  #     host_switch_mode: "STANDARD"
  #     description: "NSX configured {{item}} Transport Zone"
  #     transport_type: "{%if 'Overlay' in item%}OVERLAY{%elif 'Vlan' in item%}VLAN{%endif%}"
  #     is_default: "false"
  #     nested_nsx: "false"
  #     host_switch_name: "NSXT-NVDS"
  #     state: "present"
  #   with_items:
  #     - Overlay
  #     - Vlan
  #     - Edge-1st-Vlan
  #     - Edge-2nd-Vlan
  #     - Edge-3rd-Vlan
  #     - Edge-4th-Vlan


  # - name: View all compute managers
  #   debug:
  #     msg: "start_{{item|ipaddr('-2')|ipaddr('address')}}"
  #   loop: "{{system_fabric.tep_pool_gws}}"
  #   when: system_fabric.tep_pool_gws is defined


  # - name: create IP Pool
  #   nsxt_ip_pools:
  #     hostname: "{{nsxt_ip}}"
  #     username: "{{nsx_username}}"
  #     password: "{{nsx_password}}"
  #     validate_certs: False
  #     display_name: "TEP_subnet_{{item|ipaddr('network/prefix')}}"
  #     state: "present"
  #     subnets:
  #       - allocation_ranges:
  #           - start: "{{item|ipaddr('2')|ipaddr('address')}}"
  #             end: "{{item|ipaddr('-2')|ipaddr('address')}}"
  #         cidr: "{{item|ipaddr('network/prefix')}}"
  #         gateway_ip: "{{item|ipaddr('address')}}"
  #   loop: "{{system_fabric.tep_pool_gws}}"
  #   when: system_fabric.tep_pool_gws is defined          
  #   vars: 
  #     ansible_python_interpreter: /usr/bin/python3


  - name: create policy IP Pool
    nsxt_policy_ip_pool:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      id: NSX_TEP_POOL
      display_name: NSX_TEP_POOL
      state: "present"
      pool_static_subnets:      
        [
        {
          "display_name": "TEP_subnet_{{item|ipaddr('network/prefix')}}",
          "state": "present",
          "allocation_ranges": [
            {
              "start": "{{item|ipaddr('2')|ipaddr('address')}}",
              "end": "{{item|ipaddr('-2')|ipaddr('address')}}"
            }
          ],
          "gateway_ip": "{{item|ipaddr('address')}}",
          "cidr": "{{item|ipaddr('network/prefix')}}"
        }
       ]
    loop: "{{system_fabric.tep_pool_gws}}"
    when: system_fabric.tep_pool_gws is defined       
    vars: 
      ansible_python_interpreter: /usr/bin/python3




  # - name: Create compute Uplink Profiles
  #   nsxt_uplink_profiles:
  #     hostname: "{{nsxt_ip}}"
  #     username: "{{nsx_username}}"
  #     password: "{{nsx_password}}"
  #     validate_certs: False
  #     display_name: "UplinkProfl-compute-{{item.0.name}}"
  #     mtu: 1600
  #     resource_type: "UplinkHostSwitchProfile"
  #     teaming:
  #       policy: "{{item.0.policy}}"
  #       active_list:
  #         - uplink_name: "uplink-{{item.1}}"
  #           uplink_type: PNIC
  #       standby_list:
  #     # {% for link in item['standby-uplinks'] if item['standby-uplinks'] %}
  #     #     - uplink_name: "uplink-{{link}}"
  #     #       uplink_type: PNIC
  #     # {% endfor %}       
  #     transport_vlan: "{{overlay_vlan|default(0)}}"
  #     state: "present"
  #   loop: "{{uplinkprofs| subelements('active-uplinks', 'skip_missing=True')}}"


  - name: Create static compute/edge TEP Uplink Profiles
    nsxt_uplink_profiles:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      display_name: "UplinkProfl-{{item.name}}"
      # mtu: 1600
      resource_type: "UplinkHostSwitchProfile"
      state: "present"
      teaming: "{{item.tm}}"
      transport_vlan: "{{overlay_vlan|default(0)}}"
      named_teamings: "{{item.ntm|default(omit)}}"
    loop:  
      - {"name": "compute-actv-actv-4nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'},{uplink_name: "UPLINK2", uplink_type: 'PNIC'},{uplink_name: "UPLINK3", uplink_type: 'PNIC'},{uplink_name: "UPLINK4", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-actv-2nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'},{uplink_name: "UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-stdby-2nics", 'tm': {"policy": "FAILOVER_ORDER", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'}], "standby_list": [{uplink_name: "UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-stdby-1nic", 'tm': {"policy": "FAILOVER_ORDER", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'}], "standby_list": [{uplink_name: "UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "edge-multi-TEP-2nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "EDG-UPLINK1", uplink_type: 'PNIC'},{uplink_name: "EDG-UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "edge-single-TEP-2nics", 'tm': {"policy": "FAILOVER_ORDER", "active_list": [{uplink_name: "EDG-UPLINK1", uplink_type: 'PNIC'}],"standby_list": [{uplink_name: "EDG-UPLINK2", uplink_type: 'PNIC'}]} }
  # - name: test
  #   debug:
  #     msg: "{{item.0}}"
  #     msg: "{{item.1}}"
  #   loop: "{{uplinkprofs| subelements('active-uplinks', 'skip_missing=True')}}"