---
- name: NSX global parameters
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    uplinkprofs:
      - {"name": "actv-actv-4nics", "policy": "LOADBALANCE_SRCID", "active-uplinks": [1,2,3,4] }
      # - {"name": "actv-actv-2nics", "policy": "LOADBALANCE_SRCID", "active-uplinks": [1,2] }
      # - {"name": "actv-stdby-2nics", "policy": "FAILOVER_ORDER", "active-uplinks": [1,2]}

  tasks:

  - name: Delete data directories
    file:
      path: ./{{item}}
      state: absent
    with_items:
      - 'data'
      - 'data'
      - 'fragments'

  - name: Create data directories
    file:
      path: ./data/fragments
      state: directory

  - name: Copy & prepare the uploaded input Excel file
    copy:
      src: "{{nsx_filepath}}/"
      dest: "./data/{{nsx_filename}}"

  - name: Initialize the excel file to use the input data
    xls_to_facts:
      src: "./data/{{nsx_filename}}"
    tags:
      - excel

  - name: Create system fabric model from spreadsheet data
    template:
      src: "./templates/{{item}}_system_fabric.j2"
      dest: "./data/fragments/{{item}}_system_fabric.yml"
    with_items:
      - "01"

  - name: Assemble fabric model
    assemble:
      src: "./data/fragments/"
      dest: "./data/system_fabric.yml"

  - name: load data
    include_vars:
      file: "./data/system_fabric.yml"

#   - name: Provision list of compute managers
#     nsxt_fabric_compute_managers:
#       hostname: "{{nsxt_ip}}"
#       username: "{{nsx_username}}"
#       password: "{{nsx_password}}"
#       validate_certs: False
#       display_name: "vCenter_{{item}}"
#       server: "{{item}}"
#       description: "vCenter_{{item}}"
#       origin_type: vCenter
#       credential:
#         credential_type: "UsernamePasswordLoginCredential"
#         username: "{{vcenter_user}}"
#         password: "{{vcenter_pass}}"
#       state: present
#     register: cpu_mgr
#     with_items: "{{system_fabric.vcenters_list}}"
#     when: system_fabric.vcenters_list is defined

  # - name: View all compute managers
  #   debug:
  #     msg: "{{cpu_mgr}}"

  - name: Create transport zone
    nsxt_transport_zones:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      resource_type: "TransportZone"
      display_name: "TZ_{{item}}"
      host_switch_mode: "STANDARD"
      description: "NSX configured {{item}} Transport Zone"
      transport_type: "{%if 'Overlay' in item%}OVERLAY{%elif 'Vlan' in item%}VLAN{%endif%}"
      is_default: "false"
      nested_nsx: "false"
      host_switch_name: "NSXT-NVDS"
      state: "present"
    with_items:
      - Overlay
      - Vlan


# # This is a spot in case the Edges are nested inside compute transport node NVDS
#   # - name: Create transport zone
#   #   nsxt_transport_zones:
#   #     hostname: "{{nsxt_ip}}"
#   #     username: "{{nsx_username}}"
#   #     password: "{{nsx_password}}"
#   #     validate_certs: False
#   #     resource_type: "TransportZone"
#   #     display_name: "TZ_{{item}}"
#   #     host_switch_mode: "STANDARD"
#   #     description: "NSX configured {{item}} Transport Zone"
#   #     transport_type: "{%if 'Overlay' in item%}OVERLAY{%elif 'Vlan' in item%}VLAN{%endif%}"
#   #     is_default: "false"
#   #     nested_nsx: "false"
#   #     host_switch_name: "NSXT-NVDS"
#   #     state: "present"
#   #   with_items:
#   #     - Overlay
#   #     - Vlan
#   #     - Edge-1st-Vlan
#   #     - Edge-2nd-Vlan
#   #     - Edge-3rd-Vlan
#   #     - Edge-4th-Vlan


#   # - name: View all compute managers
#   #   debug:
#   #     msg: "start_{{item|ipaddr('-2')|ipaddr('address')}}"
#   #   loop: "{{system_fabric.tep_pool_gws}}"
#   #   when: system_fabric.tep_pool_gws is defined


#   # - name: create IP Pool
#   #   nsxt_ip_pools:
#   #     hostname: "{{nsxt_ip}}"
#   #     username: "{{nsx_username}}"
#   #     password: "{{nsx_password}}"
#   #     validate_certs: False
#   #     display_name: "TEP_subnet_{{item|ipaddr('network/prefix')}}"
#   #     state: "present"
#   #     subnets:
#   #       - allocation_ranges:
#   #           - start: "{{item|ipaddr('2')|ipaddr('address')}}"
#   #             end: "{{item|ipaddr('-2')|ipaddr('address')}}"
#   #         cidr: "{{item|ipaddr('network/prefix')}}"
#   #         gateway_ip: "{{item|ipaddr('address')}}"
#   #   loop: "{{system_fabric.tep_pool_gws}}"
#   #   when: system_fabric.tep_pool_gws is defined          
#   #   vars: 
#   #     ansible_python_interpreter: /usr/bin/python3


  - name: create policy IP Pool
    nsxt_policy_ip_pool:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      id: NSX_TEP_POOL
      display_name: NSX_TEP_POOL
      state: "present"
      pool_static_subnets:      
        [
        {
          "display_name": "TEP_subnet_{{item|ipaddr('network')}}",
          "state": "present",
          "allocation_ranges": [
            {
              "start": "{{item|ipaddr('2')|ipaddr('address')}}",
              "end": "{{item|ipaddr('-2')|ipaddr('address')}}"
            }
          ],
          "gateway_ip": "{{item|ipaddr('address')}}",
          "cidr": "{{item|ipaddr('network/prefix')}}"
        }
       ]
    loop: "{{system_fabric.tep_pool_gws}}"
    when: system_fabric.tep_pool_gws is defined       
    vars: 
      ansible_python_interpreter: /usr/bin/python3







  - name: Create static compute/edge TEP Uplink Profiles
    nsxt_uplink_profiles:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      display_name: "UplinkProfl-{{item.name}}"
      # mtu: 1600
      resource_type: "UplinkHostSwitchProfile"
      state: "present"
      teaming: "{{item.tm}}"
      transport_vlan: "{{overlay_vlan|default(0)}}"
      named_teamings: "{{item.ntm|default(omit)}}"
    loop:  
      - {"name": "compute-actv-actv-4nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'},{uplink_name: "UPLINK2", uplink_type: 'PNIC'},{uplink_name: "UPLINK3", uplink_type: 'PNIC'},{uplink_name: "UPLINK4", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-actv-6nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'},{uplink_name: "UPLINK2", uplink_type: 'PNIC'},{uplink_name: "UPLINK3", uplink_type: 'PNIC'},{uplink_name: "UPLINK4", uplink_type: 'PNIC'},{uplink_name: "UPLINK5", uplink_type: 'PNIC'},{uplink_name: "UPLINK6", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-actv-2nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'},{uplink_name: "UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-stdby-2nics", 'tm': {"policy": "FAILOVER_ORDER", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'}], "standby_list": [{uplink_name: "UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "compute-actv-stdby-1nic", 'tm': {"policy": "FAILOVER_ORDER", "active_list": [{uplink_name: "UPLINK1", uplink_type: 'PNIC'}] } }
      - {"name": "edge-multi-TEP-2nics", 'tm': {"policy": "LOADBALANCE_SRCID", "active_list": [{uplink_name: "EDG-UPLINK1", uplink_type: 'PNIC'},{uplink_name: "EDG-UPLINK2", uplink_type: 'PNIC'}]} }
      - {"name": "edge-single-TEP-2nics", 'tm': {"policy": "FAILOVER_ORDER", "active_list": [{uplink_name: "EDG-UPLINK1", uplink_type: 'PNIC'}],"standby_list": [{uplink_name: "EDG-UPLINK2", uplink_type: 'PNIC'}]} }
  # - name: test
  #   debug:
  #     msg: "{{item.0}}"
  #     msg: "{{item.1}}"
  #   loop: "{{uplinkprofs| subelements('active-uplinks', 'skip_missing=True')}}"



  - name: Create NSX-T transport node profile for clusters with NVDS
    nsxt_transport_node_profiles:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      resource_type: TransportNodeProfile
      display_name: "{{ item.transport_node_profile_name }}"
      description: "Transport Node Profile {{ item.transport_node_profile_name }}"
      host_switch_spec:
        resource_type: StandardHostSwitchSpec
        host_switches:
        - host_switch_profiles:
          - name: "UplinkProfl-{{item.uplink_profile}}"
            type: "UplinkHostSwitchProfile"
          - name: LLDP [Send Packet Enabled]
            type: LldpHostSwitchProfile
          - name: nsx-default-nioc-hostswitch-profile
            type: NiocProfile                      
          host_switch_name: "NSXT-NVDS"
          host_switch_mode: "STANDARD"
          is_migrate_pnics: "False"
          pnics: "{{item.nics}}"
          # pnics: "{{item.1|dict2items(key_name='uplink_name', value_name='device_name')}}"
          # - device_name: "item[1]"
          #   uplink_name: "uplink-1"
          ip_assignment_spec:
            resource_type: "StaticIpPoolSpec"
            ip_pool_name: "NSX_TEP_POOL"
          # vmk_install_migration:
          # - device_name: vmk0
          #   destination_network_name: "ls_vmk_Mgmt"
      transport_zone_endpoints:
      - transport_zone_name: "TZ_Overlay"
      - transport_zone_name: "TZ_Vlan"
      state: present
    # loop: "{{system_fabric|json_query('compute_transp_nodes[*]')|subelements('nics', 'skip_missing=True')}}"
    loop: "{{system_fabric|json_query('compute_transp_nodes[*]')}}"
    when: (item.switch_type == 'NVDS') and (item.transport_node_profile_name is defined) and (item.nics is defined)

#################### to be tested in vsphere 7
  # - name: Create NSX-T transport node profile for clusters with VDS7
  #   nsxt_transport_node_profiles:
  #     hostname: "{{nsxt_ip}}"
  #     username: "{{nsx_username}}"
  #     password: "{{nsx_password}}"
  #     validate_certs: False
  #     resource_type: TransportNodeProfile
  #     display_name: "{{ item.transport_node_profile_name }}"
  #     description: "Transport Node Profile {{ item.transport_node_profile_name }}"
  #     host_switch_spec:
  #       resource_type: StandardHostSwitchSpec
  #       host_switches:
  #       - host_switch_profiles:
  #         - name: "UplinkProfl-{{item.uplink_profile}}"
  #           type: "UplinkHostSwitchProfile"
  #         - name: LLDP [Send Packet Enabled]
  #           type: LldpHostSwitchProfile
  #         - name: nsx-default-nioc-hostswitch-profile
  #           type: NiocProfile                      
  #         host_switch_name: "{{NSXT-NVDS}}"
  #         host_switch_mode: "STANDARD"
  #         host_switch_type: "VDS"
  #         is_migrate_pnics: "False"
  #         uplinks: "{{item.nics}}"
  #         # pnics: "{{item.1|dict2items(key_name='uplink_name', value_name='device_name')}}"
  #         # - device_name: "item[1]"
  #         #   uplink_name: "uplink-1"
  #         ip_assignment_spec:
  #           resource_type: "StaticIpPoolSpec"
  #           ip_pool_name: "NSX_TEP_POOL"
  #         # vmk_install_migration:
  #         # - device_name: vmk0
  #         #   destination_network_name: "ls_vmk_Mgmt"
  #       transport_zone_endpoints:
  #       - transport_zone_name: "TZ_Overlay"
  #       - transport_zone_name: "TZ_Vlan"
  #     state: present
  #   # loop: "{{system_fabric|json_query('compute_transp_nodes[*]')|subelements('nics', 'skip_missing=True')}}"
  #   loop: "{{system_fabric|json_query('compute_transp_nodes[*]')}}"
  #   when: (item.switch_type == 'VDS') and (item.transport_node_profile_name is defined) and (item.nics is defined) and (item.vcenter) and (item.cluster_name) and (item.vds_name)


  - name: Create transport node collection
    nsxt_transport_node_collections:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      display_name: "TranspNode-{{item.cluster_name}}"
      resource_type: "TransportNodeCollection"
      description: "Transport Node {{item.cluster_name}}"
      compute_manager_name: "{{item.vcenter}}"
      cluster_name: "{{item.cluster_name}}"
      transport_node_profile_name: "{{ item.transport_node_profile_name }}"
      state: present
    loop: "{{system_fabric|json_query('compute_transp_nodes[*]')}}"
    when: (item.cluster_name is defined and item.cluster_name !='' ) and (item.transport_node_profile_name is defined) and (item.nics is defined)


  - name: Create Single Transport Nodes
    nsxt_transport_nodes:
      hostname: "{{nsxt_ip}}"
      username: "{{nsx_username}}"
      password: "{{nsx_password}}"
      validate_certs: False
      display_name: "{{ item.node_ip }}"
      host_switch_spec:
        resource_type: StandardHostSwitchSpec
        host_switches:
        - host_switch_profiles:
          - name: "UplinkProfl-{{item.uplink_profile}}"
            type: "UplinkHostSwitchProfile"
          - name: LLDP [Send Packet Enabled]
            type: LldpHostSwitchProfile
          - name: nsx-default-nioc-hostswitch-profile
            type: NiocProfile                      
          host_switch_name: "NSXT-NVDS"
          host_switch_mode: "STANDARD"
          is_migrate_pnics: "False"
          pnics: "{{item.nics}}"
          ip_assignment_spec:
            resource_type: "StaticIpPoolSpec"
            ip_pool_name: "NSX_TEP_POOL"
          # vmk_install_migration:
          # - device_name: vmk0
          #   destination_network_name: "ls_vmk_Mgmt"
      transport_zone_endpoints:
      - transport_zone_name: "TZ_Overlay"
      - transport_zone_name: "TZ_Vlan"
      node_deployment_info:
        resource_type: "HostNode"
        display_name: "{{item.node_ip}}"
        ip_addresses: ["{{item.node_ip}}"]
        os_type: "ESXI"
        managed_by_server: "{{item.vcenter}}"
        # os_version: "6.5.0"
        # host_credential:
        #   username: "root"
        #   password: "ca$hc0w"
        #   thumbprint: "e7fd7dd84267da10f991812ca62b2bedea3a4a62965396a04728da1e7f8e1cb9"
      state: present
    loop: "{{system_fabric|json_query('compute_transp_nodes[*]')}}"
    when: (item.node_ip is defined)             



